# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven (Skip Tests)
      run: mvn -B clean package -DskipTests
      env:
        MAVEN_OPTS: "-Xmx3072m"
        
    - name: Prepare deployment scripts
      run: |
        chmod +x deploy/*.sh
        tar -czf shell-executor-deploy.tar.gz target/shell-executor-*.jar deploy/*.sh
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: shell-executor
        path: |
          target/*.jar
          deploy/*.sh
          shell-executor-deploy.tar.gz

    - name: Build Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Build succeeded"
        else
          echo "❌ Build failed"
        fi
